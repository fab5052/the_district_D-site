{# {% extends 'base.html.twig' %}

{% block title %}The District
{% endblock %}

{% block body %}
	{% block stylesheets %}
		<link rel="stylesheet" href="{{ asset('css/style.css')}}">

{% endblock %}

<style>


.container {
  margin: 0 auto;
  width: 250px;
  height: 200px;
  position: relative;
  perspective: 1000px;
}

.carousel {
  height: 100%;
  width: 100%;
  position: absolute;
  transform-style: preserve-3d;
  transition: transform 1s;
}

.item {
  display: block;
  position: absolute;
  background: #000;
  width: 250px;
  height: 200px;
  line-height: 200px;
  font-size: 5em;
  text-align: center;
  color: #FFF;
  opacity: 0.95;
  border-radius: 10px;
}

.a {
  transform: rotateY(0deg) translateZ(250px);
  background: #ed1c24;
}
.b {
  transform: rotateY(60deg) translateZ(250px);
  background: #0072bc;
}
.c {
  transform: rotateY(120deg) translateZ(250px);
  background: #39b54a;
}
.d {
  transform: rotateY(180deg) translateZ(250px);
  background: #f26522;
}
.e {
  transform: rotateY(240deg) translateZ(250px);
  background: #630460;
} 
.f {
  transform: rotateY(300deg) translateZ(250px);
  background: #8c6239;
}

.next, .prev {
  color: #444;
  position: absolute;
  top: 100px;
  padding: 1em 2em;
  cursor: pointer;
  background: #CCC;
  border-radius: 5px;
  border-top: 1px solid #FFF;
  box-shadow: 0 5px 0 #999;
  transition: box-shadow 0.1s, top 0.1s;
}
.next:hover, .prev:hover { color: #000; }
.next:active, .prev:active {
  top: 104px;
  box-shadow: 0 1px 0 #999;
}
.next { right: 5em; }
.prev { left: 5em; }

</style> #}


{# h1 {
	font-size: 36px;
    letter-spacing: -2.5px;
	margin-left: 30px;
		} #}
{# 
div#carousel { 
  perspective: 1200px; 
  background: #100000; 
  padding-top: 10%; 

  margin-bottom: 3rem; 
  overflow: hidden; 
}
figure#spinner { 
vertical-align: middle;
justify-items: center;
  transform-style: preserve-3d; 
  height: 600px; 
  transform-origin: 50% 50% -500px; 
  transition: 1s; 
} 
figure#spinner img { 
  width: 40%; max-width: 425px; min-width: 350;
  position: absolute; left: 30%;
  transform-origin: 50% 50% -500px;
  outline:1px solid transparent; 
}
figure#spinner h2 {
font-size:15px;
}
figure#spinner img:nth-child(1) { transform:rotateY(0deg); 
}
figure#spinner img:nth-child(2) { transform: rotateY(-45deg); }
figure#spinner img:nth-child(3) { transform: rotateY(-90deg); }
figure#spinner img:nth-child(4) { transform: rotateY(-135deg); }
figure#spinner img:nth-child(5){ transform: rotateY(-180deg); }
figure#spinner img:nth-child(6){ transform: rotateY(-225deg); }
figure#spinner img:nth-child(7){ transform: rotateY(-270deg); }
figure#spinner img:nth-child(8){ transform: rotateY(-315deg); }
div#carousel ~ span { 
  color: #fff; 
  margin: 5%; 
  display: inline-block; 
  text-decoration: none; 
  font-size: 2rem; 
  transition: 0.6s color; 
  position: relative; 
  margin-top: -6rem; 
  border-bottom: none; 
  line-height: 0; }
div#carousel ~ span:hover { color: #888; cursor: pointer; } #}



{# main {
  overflow: hidden;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  height:100%;
  background: transparent;
  -webkit-perspective: 1000px;
          perspective: 1000px;
  -webkit-transform-style: preserve-3d;
          transform-style: preserve-3d;
		  z-index: 1;
} 

#drag-container, #spin-container {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  margin: auto;
  -webkit-transform-style: preserve-3d;
          transform-style: preserve-3d;
  -webkit-transform: rotateX(-10deg);
          transform: rotateX(-10deg);
}

#drag-container img {
  -webkit-transform-style: preserve-3d;
          transform-style: preserve-3d;
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  line-height: 200px;
  font-size: 50px;
  text-align: center;
  -webkit-box-shadow: 0 0 8px #fff;
          box-shadow: 0 0 8px #fff;
  -webkit-box-reflect: below 10px linear-gradient(transparent, transparent, #0005);
}

#drag-container img:hover {
  -webkit-box-shadow: 0 0 15px #fffd;
          box-shadow: 0 0 15px #fffd;
  -webkit-box-reflect: below 10px linear-gradient(transparent, transparent, #0007);
}

#drag-container p {
  font-family: Serif;
  position: absolute;
  top: 100%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%) rotateX(90deg);
          transform: translate(-50%,-50%) rotateX(90deg);
  color: #fff;
} #} 

{# #ground {
  width: 900px;
  height: 900px;
  position: absolute;
  top: 100%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%) rotateX(90deg);
          transform: translate(-50%,-50%) rotateX(90deg);
  background: -webkit-radial-gradient(center center, farthest-side , #9993, transparent);
} #}

{# @-webkit-keyframes spin {
  from{
    -webkit-transform: rotateY(0deg);
            transform: rotateY(0deg);
  } to{
    -webkit-transform: rotateY(360deg);
            transform: rotateY(360deg);
  }
}

@keyframes spin {
  from{
    -webkit-transform: rotateY(0deg);
            transform: rotateY(0deg);
  } to{
    -webkit-transform: rotateY(360deg);
            transform: rotateY(360deg);
  }
}
@-webkit-keyframes spinRevert {
  from{
    -webkit-transform: rotateY(360deg);
            transform: rotateY(360deg);
  } to{
    -webkit-transform: rotateY(0deg);
            transform: rotateY(0deg);
  }
}
@keyframes spinRevert {
  from{
    -webkit-transform: rotateY(360deg);
            transform: rotateY(360deg);
  } to{
    -webkit-transform: rotateY(0deg);
            transform: rotateY(0deg);
  }
} #}

		{# .trans3d {
			-webkit-transform-style: preserve-3d;
			-webkit-transform: translate3d(0, 0, 0);
			-moz-transform-style: preserve-3d;
			-moz-transform: translate3d(0, 0, 0);
			-ms-transform-style: preserve-3d;
			-ms-transform: translate3d(0, 0, 0);
			transform-style: preserve-3d;
			transform: translate3d(0, 0, 0);

			/*	-webkit-backface-visibility: hidden;
		-moz-backface-visibility: hidden;
		-ms-backface-visibility:hidden;
		backface-visibility:hidden;*/
		}

{# .contentContainer {
		   justify-items: center;
			justify-content: center;
			width: auto;
			align-items: center;
    position: relative;

		} 


		#contentContainer {
			position: absolute;
			margin-left: -500px;
			margin-top: -500px;
			left: 50%;
			top: 50%;
			width: 100%;
			height: 550px;
		}

		#carouselContainer {
			position: absolute;
			margin-left: -700px;
			margin-top: -450px;
			left: 50%;
			top: 60%;
			width: 100%;
			height: 600px;
		}

		.carouselItem {
			width: 300px;
			height: 380px;
			position: absolute;
			left: 50%;
			top: 50%;
			margin-left: -120px;
			margin-right: 120px;
			margin-top: -90px;
			visibility: hidden;
		}

		.carouselItemInner {
			width: 300px;
			height: 380px;
			position: absolute;
			border-radius: 15px 15px 5px 5px;
			justify-content: center;
			font-size: 67px;
			left: 43%;
			top: 15%;
			margin-left: -120px;
			margin-right: 120px;
			margin-top: -90px;
			text-align: center;

			overflow: hidden;
		}


       .item-h2 h2 {
			display: flex;
			justify-items: center;
			vertical-align: center;
			justify-content: center;
			font-family: 'quicksandlight', Helvetica, Arial;
			font-style: white;
			text-shadow: -1px -1px 4px rgba(0, 0, 0, 0.35);
		

			text-align: center; #

		} 
filter: dropshadow(color=#000FFF, offx=1, offy=1);

		{# .carousel-control {
			position: absolute;
			margin-top: 50%;
			transform: translateY(-50%);
			background-color: rgba(0, 0, 0, 0.5);
			color: white;

			border: none;
			padding: 10px 20px;
			cursor: pointer;
		}

		.carousel-control.prev {
			left: 10px;
		}

		.carousel-control.next {
			right: 10px;
		} #}


	
		{# <div class="bg"></div>
		<div class="bg bg2"></div>
		<div class="bg bg3"></div>
<div class="content"><img class="content" src="image/logo.png"></div> #}


	

	


{% extends 'base.html.twig' %}

{% block title %}The District
{% endblock %}

{% block body %}
{% block stylesheets %}
	<link rel="stylesheet" href="{{ asset('css/style.css')}}">
{# <link rel="stylesheet" href="{{ asset('css.nav.css')}}"> #}
{% endblock %}



<style>
{# a {
      display: flex;
      justify-items: center;
      vertical-align: center;
      justify-content: center;
      font-family: 'quicksandlight', Helvetica, Arial;
      font-style: white;
      text-shadow: -1px -1px 4px rgba(0, 0, 0, 0.4);
      filter: dropshadow(color=#6f707e5c, offx=1, offy=1);
  
      text-align: center;
  
    }

a:hover {
           color: rgba(255, 255, 5, 3);
         } #}
	.trans3d {
		transform-style: preserve-3d;
		transform: translate3d(0, 0, 0);
	}

	.container-carousel {
		padding-top: 100px ;
		justify-content: center;
		align-items: center;
		justify-items: center;
		width: 270px;
		height: 300px;
		
		margin-top: 10px;
		margin-bottom: 300px;
   
		position: relative;
transform-origin: center center;
		perspective: 2000px;
		
		transform-style: preserve-3d;
		transition: transform 1.5s;



	}

	.carousel {
		height: 100%;
		width: 100%;
		position: absolute;
		transform-style: preserve-3d;
		transition: transform 1.5s;
        transform-origin: center center;
	}

	.item {
		display: block;
		position: absolute;
		width: 250px;
		height: 300px;
		opacity: 0.95;
		border-radius: 10px;
overflow : hidden;


	}

	.item .cards {
		justify-content: center;
		align-items: center;
		
		border-radius: 15px;
		cursor: pointer;
		background-color: transparent;
		position: relative;
	
	}

	.item img {
		height: 100%;
		width: 100%;


	}


	.item h2 {
		z-index: 1;
		position: absolute;
		justify-content: center;
        color: #ebd7b5;
		font-size: 4vh;
		text-shadow: -1px -1px 10px rgba(0, 0, 0, 0.9);
		font-weight: 700;
		overflow : hidden;
		margin-left: 30px;



	}

	h5 {
		color: rgb(154, 146, 77);
		font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
		font-size: 18px;
		text-shadow: 4px solid #FFF;
font-weight: 600;

	}

	.next,
	.prev {
		color: #444;
		position: absolute;
		top: 1300px;
		padding-bottom: 15px;
	
		padding: 0.5em 2em;
		cursor: pointer;
        background: #a5969662;
		max-height: 40px;
		border-radius: 5px;
		border-top: 1px solid #FFF;
		box-shadow: -1px 3px 0 #999;
		transition: box-shadow 0.1s, top 0.1s;
	}

	.next:hover,
	.prev:hover {
		color: #000;
		top: 1300px;
	}

	.next:active,
	.prev:active {
		top: 1300px;
box-shadow: 1px 0 3px 1px #88a9b6;

	}

	.next {
		right: 5.1em;
	}

	.prev {
		left: 5em;
	}

	@media (max-width: 768px) {
        .container-carousel {
         width: 220px;
         height: 250px;
		padding: auto center;
		margin-top: 15px;
		margin-bottom: 300px;
		position: relative;
	   perspective: 200;
		transform-style: preserve-3d;
		transition: transform 1.5s;
		justify-content: center;
		justify-items: center;
		align-items: center;
            }

	.item {
display: block;
		position: absolute;
		width:200px;
		height: 250px;
justify-content: center;
		align-items: center;
		opacity: 0.95;
		border-radius: 10px;
justify-items: center;

		}

	.item .cards {
	justify-content: center;
		align-items: center;
		
		border-radius: 15px;
		cursor: pointer;
		background-color: transparent;
		
	}
            
			.item img {

		height: 100%;
		width: 100%;
	}
	
            .item h2 {
	  height: 100px;
		width: 100px;
        font-size: 3.8vw;
		text-shadow: -1px -1px 9px rgba(0, 0, 0, 0.9);
		font-weight: 750;
       color: #ebd7b5;
		align-items: center;
		margin-left: 25px;
            }

            h5 {
                font-size: 2.6vw;
				text-shadow: -1px -1px 2px rgba(0, 0, 0, 0.25);
		font-weight: 550;
		margin: 0 auto;
            }

    .next, .prev {
		top: 1250px;
		position: absolute;
	     height: 4vh;
		 width: 18vw;
		 margin-bottom: 50px;
		 margin: 0 auto;
padding: 0.6em 1.3em;

		
            }
	.next:hover,
	.prev:hover {
		color: #000;
		top: 1250px;
padding: 0.5em 2em;

		height: 4vh;
		width: 18vw;


	}

	.next:active,
	.prev:active {
		top: 1250px;
padding: 0.5em 2em;

		height: 4vh;
		width: 18vw;
		box-shadow: 0 0 0 1px #999;


	}
        }

        @media (max-width: 480px, min-width: 479px) {
 .container-carousel {
        width: 125px;
        height: 200px;
		padding: 5px 0;
		margin: 0 auto;
perspective: 500;
		top: 250px;
		margin-bottom: 300px;
		margin-left: none;
		margin-right: none;
		position: relative;
		transform-style: preserve-3d;
		transition: transform 1.5s;
		justify-content: center;
         }

	.item {
display: block;
		position: absolute;
		width: 125px;
		height: 200px;
overflow : hidden;

		opacity: 0.95;
		border-radius: 10px;
		}

			.item .cards {
					justify-content: center;
		align-items: center;
		
		border-radius: 15px;
		cursor: pointer;
		background-color: transparent;
		
		

			}
			.item img {
		height: 100%;
		width: 100%;
	}
            .item h2 {
                font-size: 4.5vw;
				text-shadow: -1px -1px 9px rgba(0, 0, 0, 0.9);
		font-weight: 750;
            }

.next, .prev h5 {

                font-size: 2vw;
				text-shadow: -1px -1px 2px rgba(0, 0, 0, 0.5);
		font-weight: 750;
            }

            .next, .prev {
				margin: auto;
                top: 65%;
				height: 4vh;
		        width: 18vw;
margin-bottom: 50px;
justify-content: center;

            }
				.next:hover,
	.prev:hover {
padding: 0 2px;

		color: #000;
		top: 65%;
		height: 4vh;
		        width: 18vw;
margin-bottom: 50px;

	}

	.next:active,
	.prev:active {
padding: 0 2px;

		top: 65%;
		height: 4vh;
	    width: 18vw;
		box-shadow: 0 0 1px 1px #999;
margin-bottom: 50px;

	}
        }
</style>



<main class="myH2">

<section class="myP">





<div id="contentContainer" class="trans3d">

		<section id="carouselContainer" class="trans3d " >
			<div class="container container-carousel  ">


				<div id="carouselItem" class="carousel ">


{% set rotate_angles = [0, 60, 120, 180, 240, 300] %}

					{% for categorie in categories %}
						{% set index = loop.index0 %}
						{% set angle = rotate_angles[index % rotate_angles|length] %}
<div class="item cards carouselItem" style="transform: rotateY({{ angle }}deg) translateZ();">



<a href="{{ path('app_categorie') }}">
<h2 class="item">{{ categorie.libelle }}</h2></a>


							<img  src="{{ asset(categorie.image) }}" alt="" style="object-fit: cover;">

						</div>
					{% endfor %}
				</div>
			</div>
		</div>

	</div>
<div class="next ">
	<h5>Suivant</h5>
</div>

	<div class="prev  ">
		<h5>Précédent</h5>
	</div>
	
	
</section></div></section></main>

{% block javascripts %}
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
{# <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js" type="text/javascript"></script>  #}
<script style="ts">
var w,
container,
carousel,
item,
itemLength,
rY,
radius;
var rotationY = 0;

$(document).ready(init);

function init() {
w = $(window);
container = $('#contentContainer');
carousel = $('#carouselContainer');
item = $('.carouselItem');

itemLength = item.length;
rY = 360 / itemLength;
radius = Math.round((170) / Math.tan(Math.PI / itemLength)); 

// set container 3d props
               /*itemLength = item.length;
                rY = 360 / itemLength;
                radius = Math.round((container.width() / 2) / Math.tan(Math.PI / itemLength));

                // set container 3d props
               
                gsap.set(container, {perspective: 1000});
                gsap.set(carousel, {z: -(radius), transformOrigin: "center center " + -radius + "px"});*/



// create carousel item props
item.each(function (i) {
var $item = $(this);
gsap.set($item, {
rotationY: rY * i,
z: radius,
transformOrigin: "50% 50% " + - radius + "px"
});
});

// Initial animation
gsap.fromTo(item, {
autoAlpha: 0,
scale: 0
}, {
duration: 1,
autoAlpha: 1,
scale: 1,
stagger: 0,
ease: "expo.inOut"
});
}

// Rotation functions
var currdeg = 0;

$(".next").on("click", {
d: "n"
}, rotate);
$(".prev").on("click", {
d: "p"
}, rotate);

function rotate(e) {
if (e.data.d == "n") {
currdeg = currdeg + rY;
}
if (e.data.d == "p") {
currdeg = currdeg - rY;
}
gsap.to(".carousel", {
duration: 1,
rotationY: currdeg,
ease: "expo.inOut"
});
}</script>

	{% endblock %}

 <div class="container-plats position-relative">
	
		{% for plat in plats %}
			<div class="col-12 col-md-6 col-sm-12  p-0 m-0 d-flex justify-content-center">
				<div class="card">
<h3 class="justify-items-center">{{plat.libelle}}</h3>

					<img class="img-card" src="{{ asset(plat.image) }}" alt="Image du plat">
					<div class="card-body">
						<p class="description">{{ plat.description }}</p>
						<h5>{{ plat.prix }}
							€</h5>
<button id"app">
	<span class="text">Commander</span>
	<span class="shimmer"></span>
</button>

						</div>
					</div>
				</div>
			</div>
		{% endfor %}
</div> 

{% endblock %}
{# </main> #}

{# {% block javascripts %}
<script>

$(".next").on("click", { d: "n" }, rotate);
$(".prev").on("click", { d: "p" }, rotate);

function rotate(e){
  if(e.data.d=="n"){
    currdeg = currdeg - 60;
  }
  if(e.data.d=="p"){
    currdeg = currdeg + 60;
  }
  carousel.css({
    "-webkit-transform": "rotateY("+currdeg+"deg)",
    "-moz-transform": "rotateY("+currdeg+"deg)",
    "-o-transform": "rotateY("+currdeg+"deg)",
    "transform": "rotateY("+currdeg+"deg)"
  });
}
</script> #}

{# <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/1.19.1/TweenMax.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script style="ts">
var w,
container,
carousel,
item,
itemLength,
rY,
ticker;
var rotationY = 0;
var addX = 0;

$(document).ready(init);

function init() {
w = $(window);
container = $('#contentContainer');
carousel = $('#carouselContainer');
item = $('.carouselItem');

itemLength = $('.carouselItem').length;

rY = 360 / itemLength;
radius = Math.round((170) / Math.tan(Math.PI / itemLength));

// set container 3d props
TweenMax.set(container, {perspective: 1500});
TweenMax.set(carousel, {
z: -(radius)
});

// create carousel item props
for (var i = 0; i < itemLength; i++) {
var $item = item.eq(i);
var $block = $item.find('.carouselItemInner');

TweenMax.set($item, {
rotationY: rY * i,
z: radius,
transformOrigin: "50% 50% " + -radius + "px"
});
animateIn($item, $block);
}


// set looper ticker
ticker = setInterval(looper, 5000 / 60); // 60 FPS
}

function animateIn($item, $block) {
var $nrX = 360 * getRandomInt(2);
var $nrY = 360 * getRandomInt(2);

var $nx = -(2000) + getRandomInt(4000);
var $ny = -(2000) + getRandomInt(4000);
var $nz = -2000 + getRandomInt(2000);

var $s = 1.5 + (getRandomInt(10) * .1);
var $d = 1 - (getRandomInt(8) * .1);

TweenMax.set($item, {
autoAlpha: 1,
delay: $d
});
TweenMax.set($block, {
z: $nz,
rotationY: $nrY,
rotationX: $nrX,
x: $nx,
y: $ny,
autoAlpha: 0
});
TweenMax.to($block, $s, {
delay: $d,
rotationY: 0,
rotationX: 0,
z: 0,
ease: Expo.easeInOut
});
TweenMax.to($block, $s - .5, {
delay: $d,
x: 0,
y: 0,
autoAlpha: 1,
ease: Expo.easeInOut
});
}

// Function to handle rotation manually
function rotateCarousel(direction) {
rotationY += direction * rY;
TweenMax.to(carousel, 1, {
rotationY: rotationY,
ease: Quint.easeOut
});
}

// loops and sets the carousel 3d properties
function looper() {
rotationY += 0.5; // Change this value to control the rotation speed
TweenMax.to(carousel, 1, {
rotationY: rotationY,
ease: Quint.easeOut
});
}

function getRandomInt($n) {
return Math.floor((Math.random() * $n) + 1);
}
</script> #}






{# <img src="image/category/asian_food_cat.jpg">
		          <img src="image/category/burger_cat.jpg">
		          <img src="image/category/pizza_cat.jpg">
		          <img src="image/category/wrap_cat.jpg">
		          <img src="image/category/veggie_cat.jpg">
		        {# ; #}{# <img src="{{ asset(categorie.image) }}">  
		           </div>
		           
		               </div>
		 <div class="swiper-button-prev"></div>
					<div class="swiper-button-next"></div>
					<div class="swiper-pagination" style="bottom: -50px;"></div>
		
		</div> 
		{# <carousel-3d>
		    <slide v-for="(slide, i) in slides" :index="i" :key="i">
		        <template slot-scope="{ index, isCurrent, leftIndex, rightIndex }">
		            <img :data-index="index" :class="{ current: isCurrent, onLeft: (leftIndex >= 0), onRight: (rightIndex >= 0) }" :src="slide.src">
		        </template>
		    </slide>
		</carousel-3d> #}{# <style>
		.carousel-home-resources {
		  .left-1 {
		    transform: translateX(-500px) translateZ(-400px) rotateY(-30deg) !important;
		  }
		  .right-1 {
		    transform: translateX(500px) translateZ(-400px) rotateY(30deg) !important;
		  }
		}
		</style> #}{# <div id="app"> #}{# <section class="my-10">
			<h2 class="carousel-3D-swiper-title">Lorem ipsum dolor sit amet</h2>
			<section class="carousel-3D-swiper-section">
				<div class="carousel-3D-swiper">
					<div class="swiper-wrapper" style="max-width: 1200px;">
			          
		     
						<div class="swiper-slide ">
		
							<div class="image-wrapper aspect-video d-flex">
		           {% for categorie in categories %}
		            <img src="{{ asset(categorie.image) }}">  
		            </div>  </div>
		            {% endfor %}
		
		<div class="swiper-button-prev"></div>
					<div class="swiper-button-next"></div>
					<div class="swiper-pagination" style="bottom: -50px;"></div>
		
		</div>
		
				</div>
			</section>
		</section>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.4.2/js/swiper.min.js"></script>
		{% endblock %}  #}{#} <carousel-3d>
		 <slide v-for="(slide, i) in slides" :index="i" :key="i">
		        <template slot-scope="{ index, isCurrent, leftIndex, rightIndex }">
		          <img src="{{ asset(categorie.image) }}">    
		          {# <img src="image 
		       </template>
		    </slide>
		     </carousel-3d> %}
		          
		
		
		{# <script scoped>
		new Vue({
		  el: '#carousel3d',
		  data: {
		    slides: 7
		  },
		  components: {
		    'carousel-3d': window['carousel-3d'].Carousel3d,
		    'slide': window['carousel-3d'].Slide
		  }
		});
		</script> 
		<script src="https://wlada.github.io/vue-carousel-3d/js/carousel-3d.umd.js"></script> 
		
		<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.min.js"></script>  #}{# <div class="details">
								<h3>Lorem ipsum dolor</h3>
								<span>Web Designer</span>
								<p>Lorem ipsum dolor</p>
							</div> #}{# <script>
		import autoplay from "@/carousel-3d/mixins/autoplay";
		import Controls from "@/carousel-3d/Controls";
		
		const noop = () => {
		}
		
		export default {
		  name: 'carousel3d',
		  components: {
		    Controls
		  },
		  props: {
		    count: {
		      type: [Number, String],
		      default: 0
		    },
		    perspective: {
		      type: [Number, String],
		      default: 35
		    },
		    display: {
		      type: [Number, String],
		      default: 5
		    },
		    loop: {
		      type: Boolean,
		      default: true
		    },
		    animationSpeed: {
		      type: [Number, String],
		      default: 500
		    },
		    dir: {
		      type: String,
		      default: 'rtl'
		    },
		    width: {
		      type: [Number, String],
		      default: 360
		    },
		    height: {
		      type: [Number, String],
		      default: 270
		    },
		    border: {
		      type: [Number, String],
		      default: 1
		    },
		    space: {
		      type: [Number, String],
		      default: 'auto'
		    },
		    startIndex: {
		      type: [Number, String],
		      default: 0
		    },
		    clickable: {
		      type: Boolean,
		      default: true
		    },
		    disable3d: {
		      type: Boolean,
		      default: false
		    },
		    minSwipeDistance: {
		      type: Number,
		      default: 10
		    },
		    inverseScaling: {
		      type: [Number, String],
		      default: 300
		    },
		    controlsVisible: {
		      type: Boolean,
		      default: false
		    },
		    controlsPrevHtml: {
		      type: String,
		      default: '&lsaquo;'
		    },
		    controlsNextHtml: {
		      type: String,
		      default: '&rsaquo;'
		    },
		    controlsWidth: {
		      type: [String, Number],
		      default: 50
		    },
		    controlsHeight: {
		      type: [String, Number],
		      default: 50
		    },
		    onLastSlide: {
		      type: Function,
		      default: noop
		    },
		    onSlideChange: {
		      type: Function,
		      default: noop
		    },
		    bias: {
		      type: String,
		      default: 'left'
		    },
		    onMainSlideClick: {
		      type: Function,
		      default: noop
		    },
		    oneDirectional: {
		      type: Boolean,
		      default: false
		    }
		  },
		  data () {
		    return {
		      viewport: 0,
		      currentIndex: 0,
		      total: 0,
		      dragOffsetX: 0,
		      dragStartX: 0,
		      dragOffsetY: 0,
		      dragStartY: 0,
		      mousedown: false,
		      zIndex: 998
		    }
		  },
		  mixins: [
		    autoplay
		  ],
		  watch: {
		    count () {
		      this.computeData()
		    }
		  },
		  computed: {
		    isLastSlide () {
		      return this.currentIndex === this.total - 1
		    },
		    isFirstSlide () {
		      return this.currentIndex === 0
		    },
		    isNextPossible () {
		      return !(!this.loop && this.isLastSlide)
		    },
		    isPrevPossible () {
		      return !(!this.loop && this.isFirstSlide)
		    },
		    slideWidth () {
		      const vw = this.viewport
		      const sw = parseInt(this.width) + (parseInt(this.border, 10) * 2)
		
		      return vw < sw && process.browser ? vw : sw
		    },
		    slideHeight () {
		      const sw = parseInt(this.width, 10) + (parseInt(this.border, 10) * 2)
		      const sh = parseInt(parseInt(this.height) + (this.border * 2), 10)
		      const ar = this.calculateAspectRatio(sw, sh)
		
		      return this.slideWidth / ar
		    },
		    visible () {
		      const v = (this.display > this.total) ? this.total : this.display
		      return v
		    },
		    hasHiddenSlides () {
		      return this.total > this.visible
		    },
		    leftIndices () {
		      let n = (this.visible - 1) / 2
		
		      n = (this.bias.toLowerCase() === 'left' ? Math.ceil(n) : Math.floor(n))
		
		      const indices = []
		
		      for (let m = 1; m <= n; m++) {
		        indices.push((this.dir === 'ltr')
		          #  ? (this.currentIndex + m) % (this.total)
		            : (this.currentIndex - m) % (this.total))
		      }
		
		      return indices
		    },
		    rightIndices () {
		      let n = (this.visible - 1) / 2
		
		      n = (this.bias.toLowerCase() === 'right' ? Math.ceil(n) : Math.floor(n))
		      const indices = []
		
		      for (let m = 1; m <= n; m++) {
		        indices.push((this.dir === 'ltr')
		           # ? (this.currentIndex - m) % (this.total) #
		            : (this.currentIndex + m) % (this.total)
		      }
		
		      return indices
		    },
		    leftOutIndex () {
		      let n = (this.visible - 1) / 2
		
		      n = (this.bias.toLowerCase() === 'left' ? Math.ceil(n) : Math.floor(n))
		      n++
		
		      if (this.dir === 'ltr') {
		        return ((this.total - this.currentIndex - n) <= 0)
		           # ? (-parseInt(this.total - this.currentIndex - n))#
		            : (this.currentIndex + n)
		      } else {
		        return (this.currentIndex - n)
		      }
		    },
		    rightOutIndex () {
		      let n = (this.visible - 1) / 2
		
		      n = (this.bias.toLowerCase() === 'right' ? Math.ceil(n) : Math.floor(n))
		      n++
		
		      if (this.dir === 'ltr') {
		        return (this.currentIndex - n)
		      } else {
		        return ((this.total - this.currentIndex - n) <= 0)
		           # ? (-parseInt(this.total - this.currentIndex - n, 10))
		            : (this.currentIndex + n)
		      }
		    }
		  },
		  methods: {
		    /**
		     * Go to next slide
		     */
		    goNext () {
		      if (this.isNextPossible) {
		        this.isLastSlide ? this.goSlide(0) : this.goSlide(this.currentIndex + 1)
		      }
		    },
		    /**
		     * Go to previous slide
		     */
		    goPrev () {
		      if (this.isPrevPossible) {
		        this.isFirstSlide ? this.goSlide(this.total - 1) : this.goSlide(this.currentIndex - 1)
		      }
		    },
		    /**
		     * Go to slide
		     * @param  {String} index of slide where to go
		     */
		    goSlide (index) {
		      this.currentIndex = (index < 0 || index > this.total - 1) ? 0 : index
		
		      if (this.isLastSlide) {
		        if (this.onLastSlide !== noop) {
		          console.warn('onLastSlide deprecated, please use @last-slide')
		        }
		        this.onLastSlide(this.currentIndex)
		
		        this.$emit('last-slide', this.currentIndex)
		      }
		
		      this.$emit('before-slide-change', this.currentIndex)
		
		      setTimeout(() => this.animationEnd(), this.animationSpeed)
		    },
		    /**
		     * Go to slide far slide
		     */
		    goFar (index) {
		      let diff = (index === this.total - 1 && this.isFirstSlide) ? -1 : (index - this.currentIndex)
		
		      if (this.isLastSlide && index === 0) {
		        diff = 1
		      }
		
		      const diff2 = (diff < 0) ? -diff : diff
		      let timeBuff = 0
		      let i = 0
		
		      while (i < diff2) {
		        i += 1
		        const timeout = (diff2 === 1) ? 0 : (timeBuff)
		
		        setTimeout(() => (diff < 0) ? this.goPrev(diff2) : this.goNext(diff2), timeout)
		
		        timeBuff += (this.animationSpeed / (diff2))
		      }
		    },
		    /**
		     * Trigger actions when animation ends
		     */
		    animationEnd () {
		      if (this.onSlideChange !== noop) {
		        console.warn('onSlideChange deprecated, please use @after-slide-change')
		      }
		      this.onSlideChange(this.currentIndex)
		
		      this.$emit('after-slide-change', this.currentIndex)
		    },
		    /**
		     * Trigger actions when mouse is released
		     * @param  {Object} e The event object
		     */
		    handleMouseup () {
		      this.mousedown = false
		      this.dragOffsetX = 0
		      this.dragOffsetY = 0
		    },
		    /**
		     * Trigger actions when mouse is pressed
		     * @param  {Object} e The event object
		     */
		    handleMousedown (e) {
		      if (!e.touches) {
		        e.preventDefault()
		      }
		
		      this.mousedown = true
		      this.dragStartX = ('ontouchstart' in window) ? e.touches[0].clientX : e.clientX
		      this.dragStartY = ('ontouchstart' in window) ? e.touches[0].clientY : e.clientY
		    },
		    /**
		     * Trigger actions when mouse is pressed and then moved (mouse drag)
		     * @param  {Object} e The event object
		     */
		    handleMousemove (e) {
		      if (!this.mousedown) {
		        return
		      }
		
		      const eventPosX = ('ontouchstart' in window) ? e.touches[0].clientX : e.clientX
		      const eventPosY = ('ontouchstart' in window) ? e.touches[0].clientY : e.clientY
		      const deltaX = (this.dragStartX - eventPosX)
		      const deltaY = (this.dragStartY - eventPosY)
		
		      this.dragOffsetX = deltaX
		      this.dragOffsetY = deltaY
		
		      // If the swipe is more significant on the Y axis, do not move the slides because this is a scroll gesture
		      if (Math.abs(this.dragOffsetY) > Math.abs(this.dragOffsetX)) {
		        return
		      }
		
		      if (this.dragOffsetX > this.minSwipeDistance) {
		        this.handleMouseup()
		        this.goNext()
		      } else if (this.dragOffsetX < -this.minSwipeDistance) {
		        this.handleMouseup()
		        this.goPrev()
		      }
		    },
		    /**
		     * A mutation observer is used to detect changes to the containing node
		     * in order to keep the magnet container in sync with the height its reference node.
		     */
		    attachMutationObserver () {
		      const MutationObserver = window.MutationObserver ||
		          window.WebKitMutationObserver ||
		          window.MozMutationObserver
		
		      if (MutationObserver) {
		        const config = {
		          attributes: true,
		          childList: true,
		          characterData: true
		        }
		
		        this.mutationObserver = new MutationObserver(() => {
		          this.$nextTick(() => {
		            this.computeData()
		          })
		        })
		
		        if (this.$el) {
		          this.mutationObserver.observe(this.$el, config)
		        }
		      }
		    },
		
		    detachMutationObserver () {
		      if (this.mutationObserver) {
		        this.mutationObserver.disconnect()
		      }
		    },
		    /**
		     * Get the number of slides
		     * @return {Number} Number of slides
		     */
		    getSlideCount () {
		      if (this.$slots.default !== undefined) {
		        return this.$slots.default.filter((value) => {
		          return value.tag !== void 0
		        }).length
		      }
		
		      return 0
		    },
		    /**
		     * Calculate slide with and keep defined aspect ratio
		     * @return {Number} Aspect ratio number
		     */
		    calculateAspectRatio (width, height) {
		      return Math.min(width / height)
		    },
		    /**
		     * Re-compute the number of slides and current slide
		     */
		    computeData (firstRun) {
		      this.total = this.getSlideCount()
		      if (firstRun || this.currentIndex >= this.total) {
		        this.currentIndex = parseInt(this.startIndex) > this.total - 1 ? this.total - 1 : parseInt(this.startIndex)
		      }
		
		      this.viewport = this.$el.clientWidth
		    },
		    setSize () {
		      this.$el.style.cssText += 'height:' + this.slideHeight + 'px;'
		      this.$el.childNodes[0].style.cssText += 'width:' + this.slideWidth + 'px;' + ' height:' + this.slideHeight + 'px;'
		    }
		  },
		
		  mounted () {
		    if (!process.server) {
		      this.computeData(true)
		      this.attachMutationObserver()
		      window.addEventListener('resize', this.setSize)
		
		      if ('ontouchstart' in window) {
		        this.$el.addEventListener('touchstart', this.handleMousedown)
		        this.$el.addEventListener('touchend', this.handleMouseup)
		        this.$el.addEventListener('touchmove', this.handleMousemove)
		      } else {
		        this.$el.addEventListener('mousedown', this.handleMousedown)
		        this.$el.addEventListener('mouseup', this.handleMouseup)
		        this.$el.addEventListener('mousemove', this.handleMousemove)
		      }
		    }
		  },
		
		  beforeDestroy () {
		    if (!process.server) {
		      this.detachMutationObserver()
		
		      if ('ontouchstart' in window) {
		        this.$el.removeEventListener('touchmove', this.handleMousemove)
		      } else {
		        this.$el.removeEventListener('mousemove', this.handleMousemove)
		      }
		
		      window.removeEventListener('resize', this.setSize)
		    }
		  }
		} 
		</script> #}{# .carousel-3d-container {
		  min-height: 1px;
		  width: 100%;
		  position: relative;
		  z-index: 0;
		  overflow: hidden;
		  margin: 20px auto;
		  box-sizing: border-box;
		}
		
		.carousel-3d-slider {
		  position: relative;
		  margin: 0 auto;
		  transform-style: preserve-3d;
		  -webkit-perspective: 1000px;
		  -moz-perspective: 1000px;
		  perspective: 1000px;
		}   #}{# <script>
		console.log(window);
		new Vue({
		  el: '#example',
		  data: {
		    slides: 7
		  },
		  components: {
		    'carousel-3d': window['carousel-3d'].Carousel3d,
		    'slide': window['carousel-3d'].Slide
		  }
		})
		</script>
		  #}{# {% extends 'base.html.twig' %}
		
		{% block title %}The District{% endblock %}
		
		{% block body %}
		<section class="container"> 
		    
		        {% for categorie in categories %}
		      
		              <div id="slider" >
		              
		                <img src="{{ asset(categorie.image) }}">
		            
		                <h2>{{ categorie.libelle }}</h2>
		        
		        {% endfor %}
		        
		    </div>
		</section>
		
		
		{% endblock %} #}{# const images = document.querySelectorAll('#slider img');
		    let currentIndex = 0;
		
		    // Fonction pour afficher l'image suivante
		    function showNextImage() {
		        images[currentIndex].style.display = 'none'; // Masquer l'image actuelle
		        currentIndex = (currentIndex + 1) % images.length; // Passer à l'image suivante (boucle)
		        images[currentIndex].style.display = 'column'; // Afficher la nouvelle image
		    } #}
